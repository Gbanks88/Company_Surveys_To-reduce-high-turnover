% Advanced MongoDB Queries and Transformations
classdef MongoAdvancedQueries
    properties
        connection
    end
    
    methods
        function obj = MongoAdvancedQueries(mongoConn)
            obj.connection = mongoConn;
        end
        
        function data = getSkillProgressTrends(obj, employeeId, timeframe)
            % Get skill progress trends over time
            pipeline = { ...
                struct('$match', struct('employeeId', employeeId, ...
                                      'surveyType', 'weekly', ...
                                      'date', struct('$gte', timeframe))), ...
                struct('$project', struct('_id', 0, ...
                                        'week', struct('$week', '$date'), ...
                                        'technicalSkills', 1, ...
                                        'softSkills', 1, ...
                                        'leadershipSkills', 1)), ...
                struct('$sort', struct('week', 1)) ...
            };
            
            data = obj.connection.aggregateData(pipeline);
        end
        
        function data = getCertificationAnalytics(obj, department)
            % Analyze certification patterns by department
            pipeline = { ...
                struct('$match', struct('department', department)), ...
                struct('$unwind', '$certifications'), ...
                struct('$group', struct('_id', '$certifications.type', ...
                                      'totalCompleted', struct('$sum', 1), ...
                                      'avgCompletionTime', struct('$avg', '$certifications.completionTime'), ...
                                      'employees', struct('$addToSet', '$employeeId'))), ...
                struct('$sort', struct('totalCompleted', -1)) ...
            };
            
            data = obj.connection.aggregateData(pipeline);
        end
        
        function data = getTeamPerformanceMetrics(obj, teamId, quarter)
            % Get comprehensive team performance metrics
            pipeline = { ...
                struct('$match', struct('teamId', teamId, ...
                                      'quarter', quarter)), ...
                struct('$group', struct('_id', '$teamId', ...
                                      'avgPerformance', struct('$avg', '$performanceScore'), ...
                                      'skillGrowth', struct('$avg', '$skillGrowthRate'), ...
                                      'projectSuccess', struct('$avg', '$projectSuccessRate'), ...
                                      'teamSatisfaction', struct('$avg', '$satisfactionScore'), ...
                                      'certifications', struct('$sum', '$certificationsCompleted'))), ...
                struct('$project', struct('_id', 0, ...
                                        'teamId', '$_id', ...
                                        'metrics', struct('performance', '$avgPerformance', ...
                                                        'growth', '$skillGrowth', ...
                                                        'success', '$projectSuccess', ...
                                                        'satisfaction', '$teamSatisfaction', ...
                                                        'certifications', '$certifications'))) ...
            };
            
            data = obj.connection.aggregateData(pipeline);
        end
        
        function data = getPromotionReadinessCandidates(obj, criteria)
            % Find employees ready for promotion based on criteria
            pipeline = { ...
                struct('$match', struct('performanceScore', struct('$gte', criteria.minPerformance), ...
                                      'yearsInRole', struct('$gte', criteria.minYears))), ...
                struct('$lookup', struct('from', 'certifications', ...
                                       'localField', 'employeeId', ...
                                       'foreignField', 'employeeId', ...
                                       'as', 'certifications')), ...
                struct('$match', struct('certifications', struct('$size', struct('$gte', criteria.minCertifications)))), ...
                struct('$project', struct('_id', 0, ...
                                        'employeeId', 1, ...
                                        'name', 1, ...
                                        'currentRole', 1, ...
                                        'performanceScore', 1, ...
                                        'readinessScore', struct('$multiply', [struct('$divide', ['$performanceScore', 100]), ...
                                                                             struct('$size', '$certifications'), ...
                                                                             '$yearsInRole']))) ...
            };
            
            data = obj.connection.aggregateData(pipeline);
        end
        
        function data = getSkillGapAnalysis(obj, roleId)
            % Analyze skill gaps for a specific role
            pipeline = { ...
                struct('$match', struct('roleId', roleId)), ...
                struct('$lookup', struct('from', 'roleRequirements', ...
                                       'localField', 'roleId', ...
                                       'foreignField', 'roleId', ...
                                       'as', 'requirements')), ...
                struct('$unwind', '$requirements'), ...
                struct('$project', struct('_id', 0, ...
                                        'skillName', '$requirements.skillName', ...
                                        'requiredLevel', '$requirements.level', ...
                                        'currentLevel', '$skillLevel', ...
                                        'gap', struct('$subtract', ['$requirements.level', '$skillLevel']))), ...
                struct('$match', struct('gap', struct('$gt', 0))), ...
                struct('$sort', struct('gap', -1)) ...
            };
            
            data = obj.connection.aggregateData(pipeline);
        end
    end
end
